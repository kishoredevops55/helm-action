deploymentOrder:
  - name: distributor
    weight: 1
  - name: ingester
    weight: 2
  - name: compactor
    weight: 3
  - name: store-gateway
    weight: 4
  - name: query-frontend
    weight: 5
  - name: querier
    weight: 6
  - name: ruler
    weight: 7
  - name: alertmanager
    weight: 8

{{- define "mimir.component" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: grafana/mimir:latest
---
{{- end }}


{{- range sort .Values.deploymentOrder "weight" "asc" }}
{{- include "mimir.component" . | indent 0 }}
{{- end }}


# Step 1: Get sorted deploymentOrder list from values.yaml
{{- $sortedComponents := sort .Values.deploymentOrder "weight" "asc" }}

# Step 2: Render only the components defined in values.yaml (in order)
{{- range $sortedComponents }}
{{- include "mimir.component" . | indent 0 }}
{{- end }}

# Step 3: Get list of all component folders dynamically
{{- $definedComponents := (pluck "name" .Values.deploymentOrder) | compact }}
{{- range .Files.Glob "templates/*" }}
  {{- $folderName := base . }}
  {{- if not (has $folderName $definedComponents) }}
    {{- include "mimir.component" (dict "name" $folderName) | indent 0 }}
  {{- end }}
{{- end }}

# Step 1: Deploy only components listed in values.yaml (in order)
{{- range $key, $value := .Values.deploymentOrder | byKey }}
{{- include "mimir.component" (dict "name" $key) | indent 0 }}
{{- end }}

# Step 2: Deploy remaining components (unordered)
{{- $definedComponents := keys .Values.deploymentOrder }}
{{- range .Files.Glob "templates/*" }}
  {{- $folderName := base . }}
  {{- if not (has $folderName $definedComponents) }}
    {{- include "mimir.component" (dict "name" $folderName) | indent 0 }}
  {{- end }}
{{- end }}


